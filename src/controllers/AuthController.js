/**
 * @swagger
 * tags:
 *   name: Authentication
 *   description: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
 */

class AuthController {
  constructor(authService) {
    this.authService = authService;
  }

  /**
   * @swagger
   * /api/auth/login:
   *   post:
   *     summary: üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   *     description: |
   *       –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —Å email –∏ –ø–∞—Ä–æ–ª–µ–º.
   *       –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º endpoints.
   *       
   *       **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
   *       \`\`\`json
   *       {
   *         "email": "student@example.com",
   *         "password": "password123"
   *       }
   *       \`\`\`
   *     tags: [Authentication]
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             $ref: '#/components/schemas/AuthLogin'
   *           examples:
   *             student:
   *               summary: –ü—Ä–∏–º–µ—Ä –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
   *               value:
   *                 email: student@example.com
   *                 password: password123
   *             teacher:
   *               summary: –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
   *               value:
   *                 email: teacher@example.com
   *                 password: teacher123
   *     responses:
   *       200:
   *         description: ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/AuthResponse'
   *             examples:
   *               success:
   *                 summary: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
   *                 value:
   *                   success: true
   *                   data:
   *                     user:
   *                       id: 1
   *                       email: student@example.com
   *                       name: –ò–≤–∞–Ω
   *                       last_name: –ò–≤–∞–Ω–æ–≤
   *                       patronymic: –ò–≤–∞–Ω–æ–≤–∏—á
   *                       created_at: "2024-01-15T10:30:00Z"
   *                       updated_at: "2024-01-15T10:30:00Z"
   *                     token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
   *                     expiresIn: "24h"
   *                   message: "–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
   *       400:
   *         description: ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/Error'
   *             examples:
   *               validation:
   *                 summary: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   *                 value:
   *                   success: false
   *                   error: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
   *       401:
   *         description: üîí –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/Error'
   *             examples:
   *               invalid:
   *                 summary: –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å
   *                 value:
   *                   success: false
   *                   error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
   *       403:
   *         description: üö´ –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/Error'
   *             examples:
   *               blocked:
   *                 summary: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
   *                 value:
   *                   success: false
   *                   error: "–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
   */
  login = async (req, res) => {
    try {
      const { email, password } = req.body || {};
      if (!email || !password) {
        return res.status(400).json({ success: false, error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
      }
      const result = await this.authService.login(email, password);
      return res.json({ success: true, data: result, message: '–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
    } catch (error) {
      const code = /–ø–∞—Ä–æ–ª|–Ω–µ –Ω–∞–π–¥–µ–Ω|–∑–∞–±–ª–æ–∫/i.test(error.message) ? 401 : 400;
      return res.status(code).json({ success: false, error: error.message });
    }
  }

  /**
   * @swagger
   * /api/auth/register:
   *   post:
   *     summary: üßæ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   *     tags: [Authentication]
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             $ref: '#/components/schemas/UserRegistration'
   *     responses:
   *       201:
   *         description: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/Success'
   */
  register = async (req, res) => {
    try {
      const { email, password, name, last_name, patronymic } = req.body || {};
      const payload = { email, password, name, last_name, patronymic };
      const result = await this.authService.register(payload);
      return res.status(201).json({ success: true, data: result, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
    } catch (error) {
      return res.status(400).json({ success: false, error: error.message });
    }
  }

  /**
   * @swagger
   * /api/auth/logout:
   *   post:
   *     summary: üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   *     tags: [Authentication]
   *     responses:
   *       200:
   *         description: –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
   */
  logout = async (req, res) => {
    try {
      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è blacklist/refresh rotation ‚Äî –∑–¥–µ—Å—å –±—ã –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–∫–µ–Ω
      return res.json({ success: true, message: '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
    } catch (error) {
      return res.status(400).json({ success: false, error: error.message });
    }
  }

  /**
   * @swagger
   * /api/auth/validate-token:
   *   post:
   *     summary: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
   *     tags: [Authentication]
   *     responses:
   *       200:
   *         description: –í–∞–ª–∏–¥–µ–Ω/–Ω–µ –≤–∞–ª–∏–¥–µ–Ω
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/TokenValidationResponse'
   */
  validateToken = async (req, res) => {
    try {
      const { token } = req.body || {};
      const result = await this.authService.validateToken(token);
      return res.json({ success: true, data: result });
    } catch (error) {
      return res.status(401).json({ success: false, error: error.message });
    }
  }

  /**
   * @swagger
   * /api/auth/refresh-token:
   *   post:
   *     summary: –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
   *     tags: [Authentication]
   *     responses:
   *       200:
   *         description: –ù–æ–≤—ã–π JWT –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/RefreshTokenResponse'
   */
  refreshToken = async (req, res) => {
    try {
      const { refreshToken } = req.body || {};
      const result = await this.authService.refreshToken(refreshToken);
      return res.json({ success: true, data: result, message: '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω' });
    } catch (error) {
      return res.status(401).json({ success: false, error: error.message });
    }
  }

  /**
   * @swagger
   * /api/auth/{userId}/change-password:
   *   post:
   *     summary: –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
   *     tags: [Authentication]
   *     parameters:
   *       - $ref: '#/components/parameters/userId'
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             $ref: '#/components/schemas/ChangePasswordRequest'
   *     responses:
   *       200:
   *         description: –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω
   */
  changePassword = async (req, res) => {
    try {
      const userId = parseInt(req.params.userId);
      const { oldPassword, newPassword } = req.body || {};
      if (isNaN(userId)) {
        return res.status(400).json({ success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
      }
      const result = await this.authService.changePassword(userId, oldPassword, newPassword);
      return res.json({ success: true, ...result });
    } catch (error) {
      return res.status(400).json({ success: false, error: error.message });
    }
  }

  /**
   * @swagger
   * /api/auth/profile:
   *   get:
   *     summary: –ü—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   *     tags: [Authentication]
   *     responses:
   *       200:
   *         description: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/ProfileResponse'
   */
  getProfile = async (req, res) => {
    try {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç req.user
      const user = req.user || null;
      if (!user) {
        return res.status(401).json({ success: false, error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
      }
      return res.json({ success: true, data: user });
    } catch (error) {
      return res.status(400).json({ success: false, error: error.message });
    }
  }
}

module.exports = AuthController;