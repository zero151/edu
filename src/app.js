const express = require('express');
const container = require('./container/dependencies');
const { specs, swaggerUi } = require('./docs/swagger');

// –†–æ—É—Ç—ã
const userRoutes = require('./routes/users');
const courseRoutes = require('./routes/courses');
const materialRoutes = require('./routes/materials');
const testRoutes = require('./routes/tests');
const questionRoutes = require('./routes/questions');
const quizRoutes = require('./routes/quiz');
const progressRoutes = require('./routes/progress');
const authRoutes = require('./routes/auth');
const analyticsRoutes = require('./routes/analytics');

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Dependency Injection
 * –¢–µ–ø–µ—Ä—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∞ –ø–æ–ª—É—á–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
 * –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç —Å–∏–ª—å–Ω—É—é —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
 */
class App {
  constructor() {
    this.app = express();
    this.container = container;
    this.setupMiddleware();
    this.setupDocumentation(); // üëà –î–û–ë–ê–í–õ–Ø–ï–ú –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Æ –ü–ï–†–í–û–ô
    this.setupRoutes();
  }

  setupMiddleware() {
    this.app.use(express.json());
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.app.use((req, res, next) => {
      console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
      next();
    });

    // CORS
    this.app.use((req, res, next) => {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
      res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      next();
    });
  }

  setupDocumentation() {
    // üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs, {
      explorer: true,
      customCss: '.swagger-ui .topbar { display: none }',
      customSiteTitle: 'Edu Mobile API Documentation',
      swaggerOptions: {
        persistAuthorization: true,
        displayRequestDuration: true,
        filter: true
      }
    }));

    // üìã Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    this.app.get('/api-docs.json', (req, res) => {
      res.setHeader('Content-Type', 'application/json');
      res.send(specs);
    });

    console.log('üìö Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000/api-docs');
  }

  setupRoutes() {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const userController = this.container.get('UserController');
    const courseController = this.container.get('CourseController');
    const materialController = this.container.get('MaterialController');
    const testController = this.container.get('TestController');
    const questionController = this.container.get('QuestionController');
    const quizController = this.container.get('QuizController');
    const progressController = this.container.get('ProgressController');
    const authController = this.container.get('AuthController');
    const analyticsController = this.container.get('AnalyticsController');

    // API routes
    this.app.use('/api/users', userRoutes(userController));
    this.app.use('/api/courses', courseRoutes(courseController));
    this.app.use('/api/materials', materialRoutes(materialController));
    this.app.use('/api/tests', testRoutes(testController));
    this.app.use('/api/questions', questionRoutes(questionController));
    this.app.use('/api/quiz', quizRoutes(quizController));
    this.app.use('/api/progress', progressRoutes(progressController));
    this.app.use('/api/auth', authRoutes(authController));
    this.app.use('/api/analytics', analyticsRoutes(analyticsController));
    
    // Health check
    this.app.get('/health', (req, res) => {
      res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        service: 'Edu Mobile API',
        version: '1.0.0',
        documentation: '/api-docs'
      });
    });

    // 404 handler
    this.app.use((req, res) => {
      res.status(404).json({
        success: false,
        error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        documentation: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: /api-docs'
      });
    });

    // Error handler
    this.app.use((error, req, res, next) => {
      console.error('Unhandled error:', error);
      res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        documentation: '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: /api-docs'
      });
    });
  }

  getApp() {
    return this.app;
  }
}

module.exports = App;