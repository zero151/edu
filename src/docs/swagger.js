/**
 * üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–ª—è Edu Mobile Platform
 * OpenAPI 3.0 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Å–µ—Ö endpoints
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –∞–¥—Ä–µ—Å—É /api-docs
 */

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Edu Mobile Platform API',
      version: '1.0.0',
      description: `
# üéì Edu Mobile Platform - REST API Documentation

–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
\`\`\`bash
POST /api/auth/register
{
  "email": "student@example.com",
  "password": "password123",
  "name": "–ò–≤–∞–Ω",
  "last_name": "–ò–≤–∞–Ω–æ–≤", 
  "patronymic": "–ò–≤–∞–Ω–æ–≤–∏—á"
}
\`\`\`

### 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
\`\`\`bash
POST /api/auth/login
{
  "email": "student@example.com",
  "password": "password123"
}
\`\`\`

### 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API
–î–æ–±–∞–≤—å—Ç–µ JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫:
\`Authorization: Bearer <–≤–∞—à_—Ç–æ–∫–µ–Ω>\`

## üìã –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- **üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏** - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –ø—Ä–æ—Ñ–∏–ª–∏
- **üìö –£—á–µ–±–Ω—ã–µ –∫—É—Ä—Å—ã** - —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–æ–≤
- **üìñ –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã** - –≤–∏–¥–µ–æ, —Å—Ç–∞—Ç—å–∏, PDF –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- **üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
- **üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è
- **üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

## üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

- JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
- –ó–∞—â–∏—Ç–∞ –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π

## üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

- Node.js + Express
- PostgreSQL
- JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- Swagger/OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
      `,
      contact: {
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        email: 'support@edumobile.com',
        url: 'https://edumobile.com/support'
      },
      license: {
        name: 'MIT',
        url: 'https://opensource.org/licenses/MIT'
      },
      termsOfService: 'https://edumobile.com/terms'
    },
    externalDocs: {
      description: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –º–∏–≥—Ä–∞—Ü–∏—è–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      url: 'https://github.com/edumobile/api/migrations'
    },
    servers: [
      {
        url: 'http://localhost:3000/api',
        description: '–°–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
      },
      {
        url: 'https://api.edumobile.com/v1',
        description: '–ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä'
      },
      {
        url: 'https://staging-api.edumobile.com/v1',
        description: '–°—Ç–µ–π–∂–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä'
      }
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          description: '–í–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Bearer <—Ç–æ–∫–µ–Ω>'
        }
      },
      schemas: {
        // ========== –û–°–ù–û–í–ù–´–ï –°–•–ï–ú–´ ==========
        Error: {
          type: 'object',
          required: ['success', 'error'],
          properties: {
            success: {
              type: 'boolean',
              example: false,
              description: '–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏'
            },
            error: {
              type: 'string',
              example: '–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏',
              description: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ'
            }
          }
        },
        // ========== –ú–ê–¢–ï–†–ò–ê–õ–´ ==========
        Material: {
          type: 'object',
          required: ['id', 'course_id', 'title', 'content_url', 'content_type'],
          properties: {
            id: { type: 'integer', example: 5 },
            course_id: { type: 'integer', example: 1 },
            title: { type: 'string', example: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ JS' },
            content_url: { type: 'string', example: 'https://cdn.edumobile.com/intro.mp4' },
            content_type: { type: 'string', example: 'video', description: 'video | article | pdf' },
            created_at: { type: 'string', format: 'date-time' },
            updated_at: { type: 'string', format: 'date-time' }
          }
        },
        MaterialCreate: {
          type: 'object',
          required: ['course_id', 'title', 'content_url', 'content_type'],
          properties: {
            course_id: { type: 'integer', example: 1 },
            title: { type: 'string', example: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ JS' },
            content_url: { type: 'string', example: 'https://cdn.edumobile.com/intro.mp4' },
            content_type: { type: 'string', example: 'video' }
          },
          additionalProperties: false
        },
        MaterialUpdate: {
          type: 'object',
          properties: {
            title: { type: 'string' },
            content_url: { type: 'string' },
            content_type: { type: 'string' }
          },
          additionalProperties: false
        },

        // ========== –¢–ï–°–¢–´ ==========
        Test: {
          type: 'object',
          required: ['id', 'course_id', 'title'],
          properties: {
            id: { type: 'integer', example: 4 },
            course_id: { type: 'integer', example: 1 },
            title: { type: 'string', example: '–¢–µ—Å—Ç –ø–æ –æ—Å–Ω–æ–≤–∞–º' },
            created_at: { type: 'string', format: 'date-time' },
            updated_at: { type: 'string', format: 'date-time' }
          }
        },
        TestCreate: {
          type: 'object',
          required: ['course_id', 'title'],
          properties: {
            course_id: { type: 'integer', example: 1 },
            title: { type: 'string', example: '–¢–µ—Å—Ç –ø–æ –æ—Å–Ω–æ–≤–∞–º' }
          },
          additionalProperties: false
        },
        TestUpdate: {
          type: 'object',
          properties: {
            title: { type: 'string' }
          },
          additionalProperties: false
        },

        // ========== QUIZ / –ü–û–ü–´–¢–ö–ò ==========
        QuizSubmitAnswer: {
          type: 'object',
          required: ['attemptId', 'questionId'],
          properties: {
            attemptId: { type: 'integer', example: 12 },
            questionId: { type: 'integer', example: 45 },
            selectedOptionId: { type: 'integer', nullable: true, example: 3 }
          },
          additionalProperties: false
        },
        Attempt: {
          type: 'object',
          properties: {
            id: { type: 'integer', example: 12 },
            user_id: { type: 'integer', example: 7 },
            test_id: { type: 'integer', example: 3 },
            started_at: { type: 'string', format: 'date-time' },
            finished_at: { type: 'string', format: 'date-time', nullable: true }
          }
        },
        AttemptResult: {
          type: 'object',
          properties: {
            attempt_id: { type: 'integer', example: 12 },
            correct: { type: 'integer', example: 8 },
            total: { type: 'integer', example: 10 },
            score_percent: { type: 'number', example: 80 }
          }
        },

        // ========== –ü–†–û–ì–†–ï–°–° ==========
        ProgressSummary: {
          type: 'object',
          properties: {
            course_id: { type: 'integer', example: 1 },
            completed_materials: { type: 'integer', example: 5 },
            total_materials: { type: 'integer', example: 10 },
            percent: { type: 'number', example: 50 }
          }
        },
        Activity: {
          type: 'object',
          properties: {
            type: { type: 'string', example: 'material_completed' },
            material_id: { type: 'integer', example: 15 },
            occurred_at: { type: 'string', format: 'date-time' }
          }
        },
        Success: {
          type: 'object',
          required: ['success'],
          properties: {
            success: {
              type: 'boolean',
              example: true,
              description: '–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏'
            },
            message: {
              type: 'string',
              example: '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
              description: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ'
            },
            data: {
              type: 'object',
              description: '–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞'
            }
          }
        },

        // ========== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ==========
        User: {
          type: 'object',
          required: ['id', 'email', 'name', 'last_name', 'patronymic'],
          properties: {
            id: {
              type: 'integer',
              example: 1,
              description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            },
            email: {
              type: 'string',
              format: 'email',
              example: 'student@example.com',
              description: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            },
            name: {
              type: 'string',
              example: '–ò–≤–∞–Ω',
              description: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              minLength: 2,
              maxLength: 50
            },
            last_name: {
              type: 'string',
              example: '–ò–≤–∞–Ω–æ–≤',
              description: '–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              minLength: 2,
              maxLength: 50
            },
            patronymic: {
              type: 'string',
              example: '–ò–≤–∞–Ω–æ–≤–∏—á',
              description: '–û—Ç—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              minLength: 2,
              maxLength: 50
            },
            created_at: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-15T10:30:00Z',
              description: '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
            },
            updated_at: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-15T10:30:00Z',
              description: '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
            }
          }
        },

        UserUpdate: {
          type: 'object',
          properties: {
            email: { type: 'string', format: 'email', example: 'new.email@example.com' },
            name: { type: 'string', minLength: 2, maxLength: 50, example: '–ò–≤–∞–Ω' },
            last_name: { type: 'string', minLength: 2, maxLength: 50, example: '–ò–≤–∞–Ω–æ–≤' },
            patronymic: { type: 'string', minLength: 2, maxLength: 50, example: '–ò–≤–∞–Ω–æ–≤–∏—á' }
          },
          additionalProperties: false
        },

        UserRegistration: {
          type: 'object',
          required: ['email', 'password', 'name', 'last_name', 'patronymic'],
          properties: {
            email: {
              type: 'string',
                  format: 'email',
              example: 'student@example.com',
              description: 'Email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
            },
            password: {
              type: 'string',
              format: 'password',
              minLength: 6,
              example: 'password123',
              description: '–ü–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤)'
            },
            name: {
              type: 'string',
              minLength: 2,
              maxLength: 50,
              example: '–ò–≤–∞–Ω',
              description: '–ò–º—è'
            },
            last_name: {
              type: 'string',
              minLength: 2,
              maxLength: 50,
              example: '–ò–≤–∞–Ω–æ–≤',
              description: '–§–∞–º–∏–ª–∏—è'
            },
            patronymic: {
              type: 'string',
              minLength: 2,
              maxLength: 50,
              example: '–ò–≤–∞–Ω–æ–≤–∏—á',
              description: '–û—Ç—á–µ—Å—Ç–≤–æ'
            }
          }
        },

        // ========== –ö–£–†–°–´ ==========
        Course: {
          type: 'object',
          required: ['id', 'title'],
          properties: {
            id: {
              type: 'integer',
              example: 1,
              description: 'ID –∫—É—Ä—Å–∞'
            },
            title: {
              type: 'string',
              example: 'JavaScript –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
              description: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞'
            },
            description: {
              type: 'string',
              example: '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã JavaScript —Å –Ω—É–ª—è',
              description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞'
            },
            created_at: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-15T10:30:00Z'
            },
            updated_at: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-15T10:30:00Z'
            }
          }
        },

        CourseCreate: {
          type: 'object',
          required: ['title'],
          properties: {
            title: { type: 'string', example: 'JavaScript –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö' },
            description: { type: 'string', example: '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã JavaScript —Å –Ω—É–ª—è' }
          },
          additionalProperties: false
        },

        CourseUpdate: {
          type: 'object',
          properties: {
            title: { type: 'string', example: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞' },
            description: { type: 'string', example: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ' }
          },
          additionalProperties: false
        },

        // ========== –í–û–ü–†–û–°–´ ==========
        Question: {
          type: 'object',
          required: ['id', 'test_id', 'question_text', 'question_type'],
          properties: {
            id: { type: 'integer', example: 10 },
            test_id: { type: 'integer', example: 3, description: 'ID —Ç–µ—Å—Ç–∞' },
            question_text: { type: 'string', example: '–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ JavaScript –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞?' },
            question_type: { type: 'string', example: 'single_choice', description: 'single_choice | multiple_choice | text' },
            created_at: { type: 'string', format: 'date-time' },
            updated_at: { type: 'string', format: 'date-time' }
          }
        },

        QuestionCreate: {
          type: 'object',
          required: ['test_id', 'question_text', 'question_type'],
          properties: {
            test_id: { type: 'integer', example: 3 },
            question_text: { type: 'string', example: '–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ —Ç–∏–ø—É –∏ –∑–Ω–∞—á–µ–Ω–∏—é?' },
            question_type: { type: 'string', example: 'single_choice' }
          },
          additionalProperties: false
        },

        QuestionUpdate: {
          type: 'object',
          properties: {
            question_text: { type: 'string' },
            question_type: { type: 'string' }
          },
          additionalProperties: false
        },

        // ========== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ==========
        AuthLogin: {
          type: 'object',
          required: ['email', 'password'],
          properties: {
            email: {
              type: 'string',
              format: 'email',
              example: 'student@example.com'
            },
            password: {
              type: 'string',
              format: 'password',
              example: 'password123'
            }
          }
        },

        AuthResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: true
            },
            data: {
              type: 'object',
              properties: {
                user: {
                  $ref: '#/components/schemas/User'
                },
                token: {
                  type: 'string',
                  example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
                },
                expiresIn: {
                  type: 'string',
                  example: '24h'
                }
              }
            },
            message: {
              type: 'string',
              example: '–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
            }
          }
        }
        ,
        ChangePasswordRequest: {
          type: 'object',
          required: ['oldPassword', 'newPassword'],
          properties: {
            oldPassword: { type: 'string', format: 'password', example: 'oldPass123' },
            newPassword: { type: 'string', format: 'password', example: 'newPass456' }
          },
          additionalProperties: false
        },
        TokenValidationResponse: {
          type: 'object',
          properties: {
            valid: { type: 'boolean', example: true }
          }
        },
        RefreshTokenResponse: {
          type: 'object',
          properties: {
            token: { type: 'string', example: 'new.jwt.token' },
            expiresIn: { type: 'string', example: '24h' }
          }
        },
        ProfileResponse: {
          type: 'object',
          properties: {
            success: { type: 'boolean', example: true },
            data: { $ref: '#/components/schemas/User' }
          }
        }
      },
      responses: {
        UnauthorizedError: {
          description: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              },
              example: {
                success: false,
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
              }
            }
          }
        },
        ValidationError: {
          description: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              },
              example: {
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
              }
            }
          }
        },
        NotFoundError: {
          description: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Error'
              },
              example: {
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
              }
            }
          }
        }
      },
      parameters: {
        userId: {
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'integer',
            minimum: 1
          },
          description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          example: 1
        },
        courseId: {
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'integer',
            minimum: 1
          },
          description: 'ID –∫—É—Ä—Å–∞',
          example: 1
        }
        ,
        materialId: {
          in: 'path',
          name: 'materialId',
          required: true,
          schema: { type: 'integer', minimum: 1 },
          description: 'ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
          example: 5
        },
        testId: {
          in: 'path',
          name: 'testId',
          required: true,
          schema: { type: 'integer', minimum: 1 },
          description: 'ID —Ç–µ—Å—Ç–∞',
          example: 3
        },
        attemptId: {
          in: 'path',
          name: 'attemptId',
          required: true,
          schema: { type: 'integer', minimum: 1 },
          description: 'ID –ø–æ–ø—ã—Ç–∫–∏',
          example: 12
        }
      }
    },
    security: [
      {
        bearerAuth: []
      }
    ],
    tags: [
      {
        name: 'Authentication',
        description: '–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      },
      {
        name: 'Users',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'
      },
      {
        name: 'Courses',
        description: '–†–∞–±–æ—Ç–∞ —Å —É—á–µ–±–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏'
      },
      {
        name: 'Materials',
        description: '–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
      },
      {
        name: 'Tests',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —ç–∫–∑–∞–º–µ–Ω—ã'
      },
      {
        name: 'Progress',
        description: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è'
      },
      {
        name: 'Analytics',
        description: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
      }
    ]
  },
  apis: [
    './src/routes/*.js',
    './src/controllers/*.js',
    './src/models/*.js'
  ]
};

const specs = swaggerJsdoc(options);

module.exports = {
  specs,
  swaggerUi
};